name: Full CI Workflow

permissions:
  contents: read          # keep default read-only on your code
  security-events: write  # allow writing code-scanning results


on: [push, pull_request]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "MyWebApp"
          path: "."
          format: "HTML"
          out: "dependency-check-report"

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check-Report
          path: dependency-check-report

  test-nginx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Nginx with Docker
        run: |
          docker run -d --name test-nginx -p 8080:80 -v ${{ github.workspace }}/index.html:/usr/share/nginx/html/index.html:ro nginx:latest

      - name: Wait for Nginx to start
        run: sleep 5

      - name: Test Hello World Page
        run: |
          curl -s -o response.html http://localhost:8080/index.html
          grep "Hello World" response.html
          
      - name: Stop Nginx container
        run: docker stop test-nginx

  eslint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-modules

      - name: Install Node.js dependencies
        run: npm install

      - name: Create reports directory
        run: mkdir -p reports

      - name: Install ESLint SARIF Formatter
        run: npm install @microsoft/eslint-formatter-sarif --save-dev

      - name: Run ESLint with SARIF output
        run: npx eslint . --format @microsoft/eslint-formatter-sarif --output-file reports/eslint-results.sarif || true

      - name: Debug ESLint Output
        run: cat reports/eslint-results.sarif || echo "No SARIF report generated"

      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/eslint-results.sarif
  sonarqube:
    name: Analyze with SonarQube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

